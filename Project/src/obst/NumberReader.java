/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package obst;

//////////////////////////////////////
// Do not alter this file in any way!
//////////////////////////////////////

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

/**
 * This class functions as a reader for the input files generated by the programs
 * available on minerva. The programs return binary files containing keys that
 * are added to the tree and are used for searching. 
 * 
 * The files contain a lists of keys that will be added to the tree and for which search query's
 * will be executed. The first set of numbers are preceeded by the character 't' and need
 * to be added to the tree. The second set of numbers are preceeded by the character 'z' and
 * are used as parameter for the search query's.
 * To read the entire file, you first need to construct a new object,
 * then while hasNext() and type is 't', the first category of numbers can be 
 * read with the next() function.
 * Next while hasNext() and the type is 'z', the second category of numbers can 
 * be read with next(). 
 * Finally, close the file with close().
 * 
 */
public class NumberReader {
    
    private FileInputStream in;
    private byte[] bytes;
    private int curByte;
    
    /**
     * Create a new NumberReader
     * @param fileName The file name of the file that will be read
     * @throws IOException if the file could not be read.
     */
    public NumberReader(String fileName){
        bytes = new byte[4];
        try{
            in = new FileInputStream(new File(fileName));
        }catch(FileNotFoundException e){
            System.err.println("File containing number distribution was not found");
            System.exit(1);
        }
        try{
            curByte = in.read();
        }catch(IOException e){
            System.err.println("First byte of file containing number distribution "
                    + "could not be read");
            System.exit(1);
        }
    }
    
    /**
     * Closes the file after reading
     */
    public void close(){
        try {
            in.close(); 
        }catch(IOException e){
            System.err.println("Could not close input File after reading last byte");
            System.exit(1);
        }
    }
    
    /**
     * returns if the file contains numbers that are still unread.
     * @return 
     */
    public boolean hasNext(){
        return curByte >= 0;
    }
    
    /**
     * returns the type of the current number without reading it. Normally,
     * this is 't' for numbers that should be added to the trees and 'z'
     * for numbers that should be searched for.
     * @return 't' for 'toevoegen' or 'z' for 'zoeken'
     */
    public char type(){
        return (char) curByte;
    }
    
    /**
     * return the next number in the file.
     * @return the next number in the file.
     * @throws an IOException if the end of file is reached or a number could
     * not be read for a different reason
     */
    public int next(){
        int value = 0;
        try{
            in.read(bytes);
            curByte = in.read();
            for(int i = 3; i >= 0; i--)
                value =  ( value << 8) + (0x000000FF & ((int)bytes[i]));
        }catch(IOException e){
            System.err.println("Error while reading number from input file");
            System.err.println(e);
            System.exit(1);
        }
        return value;
    }
    
}
